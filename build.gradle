

buildscript {
    ext {
        kotlin_version = '1.4.10'
        junit_version = '4.12'
        slf4j_version = '1.7.28'
        jackson_version = '2.9.8'
        lettuce_version = '5.1.8.RELEASE'
        netty_version = '4.1.38.Final'
        kryo_version = '5.0.0'

        spring_version = '5.1.5.RELEASE'
        spring_boot_version = '2.1.3.RELEASE'
        spring_cloud_version = '2.1.0.RELEASE'

        nexus_workflow_version = '0.6'
        h2_version = '1.4.199'
    }



    repositories {
        mavenLocal()
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
        mavenCentral()
    }
    dependencies {
//        classpath("org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlin_version")
        classpath("com.adaptc.gradle:nexus-workflow:$nexus_workflow_version")
    }
}

allprojects {

    group 'com.labijie'
    version '1.2.0'

    project.ext["oss-releases.url"] = "https://oss.sonatype.org/index.html#stagingRepositories"
    project.ext["oss-releases.username"] = System.getenv("PUB_USER")
    project.ext["oss-releases.password"] = System.getenv("PUB_PWD")

    apply plugin: 'kotlin'
    apply plugin: 'signing'
    apply plugin: 'kotlin-spring'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8

    configurations {
        all*.exclude group: "org.apache.logging.log4j"
    }


    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }


    repositories {
        mavenLocal()
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
        mavenCentral()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    }
}


static Boolean  isNotNullOrBlank(String s){
    return !(s == null || s.trim().length() == 0)
}

static canBeSign(Project project) {
    def useGpg =  project.hasProperty('signing.keyId') &&  project.hasProperty("signing.password") && project.hasProperty('signing.secretKeyRingFile')
     def useInMemoryGpg =   (isNotNullOrBlank(System.getenv('GPG_KEY')) && isNotNullOrBlank(System.getenv("GPG_PWD")))
    return useGpg || useInMemoryGpg
}


subprojects {

    def u = isNotNullOrBlank(System.getenv("PUB_USER"))
            ? System.getenv("PUB_USER") : System.properties.getProperty("mu")
    def p =isNotNullOrBlank(System.getenv("PUB_PWD"))
            ? System.getenv("PUB_PWD") : System.properties.getProperty("mp")

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.name == "core" ? "caching-kotlin" : "caching-kotlin-" + project.name
                from components.java
                pom {
                    name = project.name
                    description = 'labijie caching library'
                    url = 'https://github.com/endink/caching-kotlin'
//                    properties = [
//                            myProp: "value",
//                            "prop.with.dots": "anotherValue"
//                    ]
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'labijie.com'
                            name = 'AndersXiao'
                            email = 'sharping@outlook.com'
                        }
                    }
                    scm {
                        url = 'https://github.com/endink/caching-kotlin'
                        connection = 'scm:git@github.com:endink/caching-kotlin.git'
                        developerConnection = 'git@github.com:endink/caching-kotlin.git'
                    }
                }
            }
        }

        signing {
            if (canBeSign(project)) {
                def signingKey = System.getenv('GPG_KEY')
                def password = System.getenv('GPG_PWD')
                if(isNotNullOrBlank(signingKey) && isNotNullOrBlank(password)) {
                    useInMemoryPgpKeys(signingKey, password)
                }
                sign publishing.publications.mavenJava
            } else {
                println "Signing information missing/incomplete for ${project.name}"
            }
        }

        repositories {
            if (isNotNullOrBlank(u) && isNotNullOrBlank(p)) {
                maven {
                    name = "OSSRH"
                    url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                    credentials {
                        username = u
                        password = p
                    }
                }
            }
        }
    }
}

apply plugin: 'nexus-workflow'

dependencies {
    compile project(":redis-starter")
}

//local use