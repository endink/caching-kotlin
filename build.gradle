

buildscript {
    ext {
        kotlin_version = '1.4.10'
        junit_verions = '5.7.0'
        slf4j_version='1.7.30'
        jackson_version = '2.11.4'
        lettuce_version = '6.1.1.RELEASE'
        netty_version = '4.1.52.Final'
        kryo_version = '5.1.0'

        spring_boot_version = '2.4.5'
        spring_cloud_version='2020.0.2'
        spring_version = '5.3.6'
        spring_dep_mgn_version='1.0.10.RELEASE'

        nexus_staging_version = '0.22.0'
        h2_version = '1.4.199'
    }



    repositories {
        mavenLocal()
        maven{ url 'https://maven.aliyun.com/nexus/content/groups/public/'}
        mavenCentral()
    }
    dependencies {
//        classpath("org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlin_version")
        classpath("io.codearte.gradle.nexus:gradle-nexus-staging-plugin:$nexus_staging_version")
    }
}

apply plugin: 'io.codearte.nexus-staging'

allprojects {

    group 'com.labijie'
    version '1.2.2'

    configurations.all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == 'io.netty') {
                    details.useVersion netty_version
                }
            }
        }
    }

    apply plugin: 'kotlin'
    apply plugin: 'signing'
    apply plugin: 'kotlin-spring'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8

    configurations {
        all*.exclude group: "org.apache.logging.log4j"
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }


    repositories {
        mavenLocal()
        maven{ url 'https://maven.aliyun.com/nexus/content/groups/public/'}
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit5', version: kotlin_version
        testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_verions")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_verions")
    }

}


static Boolean  isNotNullOrBlank(Object s){
    return !(s == null || s.toString().trim().length() == 0)
}

static canBeSign(Project project) {
    return isNotNullOrBlank(project.findProperty("signing.password")) &&
            isNotNullOrBlank(project.findProperty('signing.secretKeyRingFile')) &&
            isNotNullOrBlank(project.findProperty('signing.keyId'))
}

static getPropertyOrCmdArgs(Project project, String propertyName, String cmdArgName) {
    def propertyValue = project.hasProperty(propertyName) ? project.property(propertyName).toString() : null
    def v = (System.properties.getProperty(cmdArgName) ?: propertyValue ) ?: System.getenv(propertyName)
    return isNotNullOrBlank(v) ? v : null
}


subprojects {

    def u = getPropertyOrCmdArgs(project, "PUB_USER", "u")
    def p =getPropertyOrCmdArgs(project, "PUB_PWD", "p")

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.name == "core" ? "caching-kotlin" : "caching-kotlin-" + project.name
                from components.java
                pom {
                    name = project.name
                    description = 'labijie caching library'
                    url = 'https://github.com/endink/caching-kotlin'
//                    properties = [
//                            myProp: "value",
//                            "prop.with.dots": "anotherValue"
//                    ]
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'labijie.com'
                            name = 'AndersXiao'
                            email = 'sharping@outlook.com'
                        }
                    }
                    scm {
                        url = 'https://github.com/endink/caching-kotlin'
                        connection = 'scm:git@github.com:endink/caching-kotlin.git'
                        developerConnection = 'git@github.com:endink/caching-kotlin.git'
                    }
                }
            }
        }

        signing {
            if (canBeSign(project)) {
                sign publishing.publications.mavenJava
                println "Siging for ${project.name}"
            } else {
                println "Signing information missing/incomplete for ${project.name}"
            }
        }

        repositories {
            if (isNotNullOrBlank(u) && isNotNullOrBlank(p)) {
                maven {
                    name = "OSSRH"
                    url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                    credentials {
                        username = u
                        password = p
                    }
                }
            }
        }
    }
}

nexusStaging {
    def u = getPropertyOrCmdArgs(project, "PUB_USER", "u")
    def p =getPropertyOrCmdArgs(project, "PUB_PWD", "p")

    username = u
    password = p
    packageGroup = "com.labijie"
}